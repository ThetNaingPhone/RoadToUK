model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  passwordHash String

  applications Application[]
  advice       Advice[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Admin {
  id           String    @id @default(cuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  role         AdminRole @default(SUPER_ADMIN)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  activityLogs AdminActivityLog[]
}

enum AdminRole {
  SUPER_ADMIN
  MODERATOR
  EDITOR
}

model Country {
  id           String          @id @default(cuid())
  name         String
  code         String          @unique
  description  String?

  universities   University[]
  visaRequirements VisaRequirement[]
  advice         Advice[]
  applications   Application[]

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  createdById  String
  createdBy    Admin           @relation(fields: [createdById], references: [id])
  updatedById  String?
  updatedBy    Admin?          @relation(fields: [updatedById], references: [id])
}

model University {
  id           String          @id @default(cuid())
  name         String
  country      Country         @relation(fields: [countryId], references: [id])
  countryId    String
  ranking      Int?
  description  String?

  visaRequirements VisaRequirement[]
  advice         Advice[]
  applications   Application[]

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  createdById  String
  createdBy    Admin           @relation(fields: [createdById], references: [id])
  updatedById  String?
  updatedBy    Admin?          @relation(fields: [updatedById], references: [id])
}

model VisaRequirement {
  id           String      @id @default(cuid())
  country      Country     @relation(fields: [countryId], references: [id])
  countryId    String
  university   University? @relation(fields: [universityId], references: [id])
  universityId String?
  documents    String
  fees         Float
  processingTime Int

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdById  String
  createdBy    Admin       @relation(fields: [createdById], references: [id])
  updatedById  String?
  updatedBy    Admin?      @relation(fields: [updatedById], references: [id])
}

model Advice {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  country      Country?    @relation(fields: [countryId], references: [id])
  countryId    String?
  university   University? @relation(fields: [universityId], references: [id])
  universityId String?
  content      String
  createdAt    DateTime    @default(now())
}

model Application {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  country      Country     @relation(fields: [countryId], references: [id])
  countryId    String
  university   University  @relation(fields: [universityId], references: [id])
  universityId String
  status       String      // e.g. pending, approved, rejected
  submittedAt  DateTime    @default(now())
}

model AdminActivityLog {
  id           String      @id @default(cuid())
  admin        Admin       @relation(fields: [adminId], references: [id])
  adminId      String
  action       String      // e.g. CREATE_COUNTRY, UPDATE_UNIVERSITY
  entityType   String      // e.g. Country, University
  entityId     String
  timestamp    DateTime    @default(now())
  details      String?     // Optional details JSON or string
}
